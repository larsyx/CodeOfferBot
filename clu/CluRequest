const dotenv = require('dotenv').config();
const axios = require('axios');
const { DefaultAzureCredential, ClientSecretCredential, InteractiveBrowserCredential } = require('@azure/identity');
const { SecretClient } = require('@azure/keyvault-secrets');

if(dotenv.error)
    throw dotenv.error;

const keyVaultName = process.env.KEY_VAULT_NAME;
const vaultUri = `https://${keyVaultName}.vault.azure.net`;


const credential = new InteractiveBrowserCredential({
    tenantId: process.env.TenantId
});

const client = new SecretClient(vaultUri, credential);


const URL = `https://${process.env.CluAPIHostName}/language/:analyze-conversations?api-version=2022-10-01-preview`;

let headers = null;

const data = {  
    "kind": "Conversation",
    "analysisInput": {
        "conversationItem": {
        "id": "1",
        "participantId": "1",
        "text": ""
        }
    },
    "parameters": {
        "projectName": process.env.CluProjectName,
        "deploymentName": process.env.CluDeploymentName,
        "stringIndexType": "TextElement_V8"
    }  
}

async function getKey(nameKey) {
    try {
        const secret = await client.getSecret(nameKey);
        key = secret.value;
        return key;
    } catch (err) {
        console.error(`Error retrieving secret ${nameKey}: `, err);
        throw err;
    }
}

async function createHeaders() {
    if(headers)
        return headers;

    const key = await getKey('CluAPIKey');
    headers = {
        'Content-Type': 'application/json',
        'Ocp-Apim-Subscription-Key': key,
    };
    return headers
}

async function analysisText(text){
    const headers = await createHeaders();
    data.analysisInput.conversationItem.text = text;
    try{
        const response = await axios.post(URL, data, {headers});
        return response.data.result.prediction.topIntent;
    }
    catch(error){
        console.error(error);
        return undefined;
    }
}

async function productAnalysis(text){
    const headers = await createHeaders();
    data.analysisInput.conversationItem.text = text;
    try{
        const response = await axios.post(URL, data, {headers});
        if(response.data.result.prediction.topIntent === 'Cerca prodotto')
            return response.data.result.prediction.entities[0].text;
        else
            return undefined;
    }
    catch(error){
        console.error(error);
    }
}

async function productSelectId(text){
    const headers = await createHeaders();
    data.analysisInput.conversationItem.text = text;
    
    try{
        const response = await axios.post(URL, data, {headers});
        if(response.data.result.prediction.topIntent === 'Seleziona_Id')
            return response.data.result.prediction.entities[0].text;
        else
            return undefined;
    }
    catch(error){
        console.error(error);
    }
}

module.exports = {
    analysisText : analysisText,
    productAnalysis : productAnalysis,
    productSelectId : productSelectId
}